
# NOT CSP EXAMPLE !!!
# SAMPLE CAPSTONE PROJECT EXAMPLE
# Oct 14, 2020
import math

# GENRE MAP
funk = 0
rock = 1
reggae = 2
r_b = 3
rap = 4
pop = 5
jazz = 6
electronic = 7

# NOLA dictionary venue genres (hand built in atm), non-amendable
venue_list = {'tipitinas':[0],
              'house_of_blues':[4,5,1],
              'preservation_hall':[6,3,4],
              'gasa_gasa':[1,3,4],
              'howlin_wolf':[0,3,4],
              'republic':[7,4,5],
              'dragons_den':[1,6,7],
              'hi_ho_lounge':[1,7,0],
              'siberia':[1,7,0]}

# NOLA dictionary venue sizes (hand built in atm), non-amendable
venue_size_list = {'tipitinas':139357,
              'house_of_blues':1582295,
              'preservation_hall':239321,
              'gasa_gasa':73166,
              'howlin_wolf':477888,
              'republic':701591,
              'dragons_den':7499,
              'hi_ho_lounge':1345,
              'siberia':20134}

#
#
# FUNCTION TO ADD ELEMENTS TO DICT
#

def append_value(dict_obj, key, value):
    if key in dict_obj:
        if not isinstance(dict_obj[key], list):
            dict_obj[key] = [dict_obj[key]]
        dict_obj[key].append(value)
    else:
        dict_obj[key] = value

#
# GENRE CHECK FUNCTION
# if artist genre identity is a match for venue genre, match (loose constraints)
#

def genre_check(constraint):
    #print('in genre check function')
    genre_filtered_dictionary = {}

    # iterate through artist's given constraints O(n)
    for i in constraint:
        for key, value in venue_list.items():
            for j in value:
                if i == j:
                    append_value(genre_filtered_dictionary, key, value)
                else:
                    pass

    return genre_filtered_dictionary

def size_match(constraint1):
    #print('in size match function')
    size_filtered_dictionary = {}

    # iterate through artist's given constraints O(n)
    for key, value in venue_size_list.items():
        if value-100000 <= constraint1 <= value+100000:
            append_value(size_filtered_dictionary, key, value)
        else:
            pass
		
    return size_filtered_dictionary
    #print('size filtered dictionary :', size_filtered_dictionary)

def Merge(dict1, dict2):
    return(dict2.update(dict1))


def mergeDict(dict1, dict2):
   ''' Merge dictionaries and keep values of common keys in list'''
  
   #dict3.update(dict1)
   #dict3.update(dict2)
	 #dict3 = {**dict1, **dict2}
   #print ("dict 3",dict3)
   #dict3 = {}
   """for key, value in dict3.items():
       if key in dict1 and key in dict2:
               dict3[key] = [value , dict1[key]]
   return dict3"""""
   # Merge dictionaries and add values of common keys in a list
    #dict3 = mergeDict(dict1, dict2)
    #print('Dictionary 3 :')
    #print(dict3)

def merge_dicts(*dicts):
    d = {}
    for dict in dicts:
        for key in dict:
            try:
                d[key].append(dict[key])
            except KeyError:
                d[key] = [dict[key]]
    return d

def final_dict(x, y):
 
	  #x =size/ y=genre
    #combined_dict={}
    perfect_match_dict = {}
    good_match_dict = {}

    size_dict = size_match(x)
    #print(size_dict)
    genre_dict = genre_check(y)
    print(genre_dict)
    
    result = merge_dicts(genre_dict,size_dict)
    print("final:",result)
    for key, value in result.items():
      if len(value)==2:
        perfect_match_dict[key]=value
      else:
       good_match_dict[key]=value

    print('perfect: ', perfect_match_dict)
    print('good: ', good_match_dict)
		
    return perfect_match_dict

def percentage(d,size1):
  for key,value in d.items():
    num=value[1]
    difference=abs(num-size1)
    per=difference/size1
    percentage1=1-per
    print (key, ":","{0:.0f}%".format(percentage1*100), "match")

'''

DO NOT NEED THIS MAIN FUNCTION ANYMORE

def main():

    # TEST FOR FUNKY, ROCK BAND
    artist_genre = [0,1]
    artist_size = 100000
    #print('venue_list ORIGINAL: ', venue_list)

    # CHANGE TO PRIORITY MATCH EVENTUALLY
    # want the funky, rock to print as priority
    # one match less priority
    # no match - no priority
    #genre_check(artist_genre)
    #size_match(artist_size)

    perfect=final_dict(artist_size, artist_genre)
    print(percentage(perfect,artist_size))

main()
'''

artist_genre = df.mapped_genre[0]
print("artist genre: ", artist_genre)
artist_size = df.followers[0]
print("artist size: ", artist_size)

perfect = final_dict(artist_size, artist_genre)
print(percentage(perfect,artist_size))
